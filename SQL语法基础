MySQL的数据主要包括以下五大类：
整数类型：BIT、BOOL、TINY INT、SMALL INT、MEDIUM INT、 INT、 BIG INT
浮点数类型：FLOAT、DOUBLE、DECIMAL
字符串类型：CHAR、VARCHAR、TINY TEXT、TEXT、MEDIUM TEXT、LONGTEXT、TINY BLOB、BLOB、MEDIUM BLOB、LONG BLOB
日期类型：Date、DateTime、TimeStamp、Time、Year

关于char，varchar，text：
1.char(n) 若存入字符数小于n，则以空格补于其后，查询之时再将空格去掉。所以char类型存储的字符串末尾不能有空格，varchar不限于此。 
2.char(n) 固定长度，char(4)不管是存入几个字符，都将占用4个字节，varchar是存入的实际字符数+1个字节（n<=255）或2个字节(n>255)，
所以varchar(4),存入3个字符将占用4个字节。 
3.char类型的字符串检索速度要比varchar类型的快。
varchar和text： 
1.varchar可指定n，text不能指定，内部存储varchar是存入的实际字符数+1个字节（n<=255）或2个字节(n>255)，text是实际字符数+2个字节。 
2.text类型不能有默认值。 
3.varchar可直接创建索引，text创建索引要指定前多少个字符。varchar查询速度快于text,在都创建索引的情况下，text的索引似乎不起作用。

创建数据库
create [database/schema] <数据库名>;
例子：
create schema xsgl
on
(
  name = xsgl_data,
  filename = 'e:\xsgl.mdf',
  size = 10mb,
  maxsize = 50mb,
  filegrowth = 5%)
)
log on
(
  name = xsgl_log,
  filename = 'e:\xsgl_log.ldf',
  size = 2mb,
  maxsize = 5mb,
  filegrowth = 1mb);

删除数据库
drop schema <数据库名>;

设置默认数据库
use schema_name;

创建表（例子）
create table student
(
  sno char(8) not null unique,
  sname char(10) not null,
  age int,
  sex char(2) check (sex in ('男','女')),
  primary key (sno)
);

建表的约束条件：
NOT NULL - 指示某列不能存储 NULL 值。
UNIQUE - 保证某列的每行必须有唯一的值。
PRIMARY KEY - NOT NULL 和 UNIQUE 的结合。确保某列（或两个列多个列的结合）有唯一标识，有助于更容易更快速地找到表中的一个特定的记录。
FOREIGN KEY - 保证一个表中的数据匹配另一个表中的值的参照完整性。
CHECK - 保证列中的值符合指定的条件。
DEFAULT - 规定没有给列赋值时的默认值。
 
删除表
drop table <表名>;

查询表格数据：
SELECT  列名表  [INTO 新表名] FROM 表或视图名
[WHERE 查询限定条件]
[GROUP BY 分组表达式]
[HAVING 分组条件]
[ORDER BY 次序表达式[ASC][DESC]]
[COMPUTE  BY ]

聚集函数：
SQL提供很多聚集函数，主要有：
COUNT([DISTINCT|ALL]*)  统计元组个数
COUNT([DISTINCT|ALL]<列名>) 统计一列中值的个数
SUM([DISTINCT|ALL] <列名>)  计算一列值的总和（此列必须是数值列）
AVG([DISTINCT|ALL] <列名>)  计算一列值的平均值（此列必须是数值列）
MAX([DISTINCT|ALL] <列名>)  求一列值中的最大值
MIN([DISTINCT|ALL] <列名>)  求一列值中的最小值
如果指定DISTINCT短语，则表示在计算时要取消指定列的重复值；ALL为缺省值。
在聚集函数遇到空值时，除COUNT（*）外，都跳过空值而只处理非空值。

增加表格数据：
insert into table_name values (---在此输入所有数据---);
insert into table_name (---在此输入选择的列名---) values (---在此输入对应的数据---);

删除表格数据
delete from <表名> where "primary key_name" = <主键名>;

修改表格数据
update table_name set <列名> = <常量> where <限定条件>

修改表格结构
添加列：
ALTER TABLE table_name ADD (column_name datatype);
删除列：
ALTER TABLE table_name DROP COLUMN (column_name);
改变列数据类型：
ALTER TABLE table_name  modify COLUMN (column_name datatype);
列重命名：
alter table student rename column test2 to test2_new;
